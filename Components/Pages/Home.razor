@page "/"

@attribute [StreamRendering]

@inject IJokeService _jokeService

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">

    @if (jokes == null)
    {
        <FluentProgressRing Color="saddlebrown"/>
        <FluentLabel>Loading jokes...</FluentLabel>
    }

    else
    {
        <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
            <FluentCard Width="350px" Height="350px" Style="background-color: floralwhite;">
                <div style="text-align: center">
                    <img src="DadJokeLogo128.png"/>
                </div>
                <br/>
                <FluentLabel Alignment="HorizontalAlignment.Center" Typo="Typography.H3" >@joke?.Question</FluentLabel>
                <br />
                <FluentLabel Alignment="HorizontalAlignment.Center" Typo="Typography.H4">@joke?.Answer </FluentLabel>
            </FluentCard>
                <FluentButton BackgroundColor="olive" OnClick="LoadNextJoke">
                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentIcon Color="Color.Custom" CustomColor="black" Value="@(new Icons.Regular.Size16.ArrowCounterclockwise())" />
                    <FluentLabel Typo="Typography.H4">Load Random Joke</FluentLabel>
                </FluentStack>
            </FluentButton>
        </FluentStack>
    }
</FluentStack>

@code {
    private IEnumerable<Joke>? jokes;
    private Joke? joke;
    private int i;

    protected override async Task OnInitializedAsync()
    {
        jokes = await _jokeService.GetAllJokesRandomized();
        i = 0;
        joke = jokes?.ElementAt(i);     
    }

    private void LoadNextJoke()
    {
        i++;
        if(i > jokes?.Count() -1)
        {
            i = 0;
        }
        joke = jokes?.ElementAt(i);
    }
}